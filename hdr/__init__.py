CDEF = 'typedef int64_t time_t; /* :-( */\n\ntypedef enum gnutls_cipher_algorithm\n{\n\tGNUTLS_CIPHER_UNKNOWN = 0,\n\tGNUTLS_CIPHER_NULL = 1,\n\tGNUTLS_CIPHER_ARCFOUR_128 = 2,\n\tGNUTLS_CIPHER_3DES_CBC = 3,\n\tGNUTLS_CIPHER_AES_128_CBC = 4,\n\tGNUTLS_CIPHER_AES_256_CBC = 5,\n\tGNUTLS_CIPHER_ARCFOUR_40 = 6,\n\tGNUTLS_CIPHER_CAMELLIA_128_CBC = 7,\n\tGNUTLS_CIPHER_CAMELLIA_256_CBC = 8,\n\tGNUTLS_CIPHER_RC2_40_CBC = 90,\n\tGNUTLS_CIPHER_DES_CBC = 91,\n\tGNUTLS_CIPHER_AES_192_CBC = 92,\n\tGNUTLS_CIPHER_AES_128_GCM = 93,\n\tGNUTLS_CIPHER_AES_256_GCM = 94,\n\tGNUTLS_CIPHER_CAMELLIA_192_CBC = 95,\n\tGNUTLS_CIPHER_SALSA20_256 = 96,\n\tGNUTLS_CIPHER_ESTREAM_SALSA20_256 = 97,\n\n\tGNUTLS_CIPHER_IDEA_PGP_CFB = 200,\n\tGNUTLS_CIPHER_3DES_PGP_CFB = 201,\n\tGNUTLS_CIPHER_CAST5_PGP_CFB = 202,\n\tGNUTLS_CIPHER_BLOWFISH_PGP_CFB = 203,\n\tGNUTLS_CIPHER_SAFER_SK128_PGP_CFB = 204,\n\tGNUTLS_CIPHER_AES128_PGP_CFB = 205,\n\tGNUTLS_CIPHER_AES192_PGP_CFB = 206,\n\tGNUTLS_CIPHER_AES256_PGP_CFB = 207,\n\tGNUTLS_CIPHER_TWOFISH_PGP_CFB = 208\n} gnutls_cipher_algorithm_t;\n\ntypedef enum\n{\n\tGNUTLS_KX_UNKNOWN = 0,\n\tGNUTLS_KX_RSA = 1,\n\tGNUTLS_KX_DHE_DSS = 2,\n\tGNUTLS_KX_DHE_RSA = 3,\n\tGNUTLS_KX_ANON_DH = 4,\n\tGNUTLS_KX_SRP = 5,\n\tGNUTLS_KX_RSA_EXPORT = 6,\n\tGNUTLS_KX_SRP_RSA = 7,\n\tGNUTLS_KX_SRP_DSS = 8,\n\tGNUTLS_KX_PSK = 9,\n\tGNUTLS_KX_DHE_PSK = 10,\n\tGNUTLS_KX_ANON_ECDH = 11,\n\tGNUTLS_KX_ECDHE_RSA = 12,\n\tGNUTLS_KX_ECDHE_ECDSA = 13,\n\tGNUTLS_KX_ECDHE_PSK = 14,\n} gnutls_kx_algorithm_t;\n\ntypedef enum\n{\n\tGNUTLS_PARAMS_RSA_EXPORT = 1,\n\tGNUTLS_PARAMS_DH = 2,\n\tGNUTLS_PARAMS_ECDH = 3,\n} gnutls_params_type_t;\n\ntypedef enum\n{\n\tGNUTLS_CRD_CERTIFICATE = 1,\n\tGNUTLS_CRD_ANON,\n\tGNUTLS_CRD_SRP,\n\tGNUTLS_CRD_PSK,\n\tGNUTLS_CRD_IA\n} gnutls_credentials_type_t;\n\ntypedef enum\n{\n\tGNUTLS_MAC_UNKNOWN = 0,\n\tGNUTLS_MAC_NULL = 1,\n\tGNUTLS_MAC_MD5 = 2,\n\tGNUTLS_MAC_SHA1 = 3,\n\tGNUTLS_MAC_RMD160 = 4,\n\tGNUTLS_MAC_MD2 = 5,\n\tGNUTLS_MAC_SHA256 = 6,\n\tGNUTLS_MAC_SHA384 = 7,\n\tGNUTLS_MAC_SHA512 = 8,\n\tGNUTLS_MAC_SHA224 = 9,\n\tGNUTLS_MAC_AEAD = 200, /* indicates that MAC is on the cipher */\n\tGNUTLS_MAC_UMAC_96 = 201,\n\tGNUTLS_MAC_UMAC_128 = 202,\n} gnutls_mac_algorithm_t;\n\ntypedef enum\n{\n\tGNUTLS_DIG_UNKNOWN = 0,\n\tGNUTLS_DIG_NULL = 1,\n\tGNUTLS_DIG_MD5 = 2,\n\tGNUTLS_DIG_SHA1 = 3,\n\tGNUTLS_DIG_RMD160 = 4,\n\tGNUTLS_DIG_MD2 = 5,\n\tGNUTLS_DIG_SHA256 = 6,\n\tGNUTLS_DIG_SHA384 = 7,\n\tGNUTLS_DIG_SHA512 = 8,\n\tGNUTLS_DIG_SHA224 = 9\n} gnutls_digest_algorithm_t;\n\ntypedef enum\n{\n\tGNUTLS_COMP_UNKNOWN = 0,\n\tGNUTLS_COMP_NULL = 1,\n\tGNUTLS_COMP_DEFLATE = 2,\n\tGNUTLS_COMP_ZLIB = 2,\n} gnutls_compression_method_t;\n\ntypedef enum\n{\n\tGNUTLS_AL_WARNING = 1,\n\tGNUTLS_AL_FATAL\n} gnutls_alert_level_t;\n\ntypedef enum\n{\n\tGNUTLS_A_CLOSE_NOTIFY,\n\tGNUTLS_A_UNEXPECTED_MESSAGE = 10,\n\tGNUTLS_A_BAD_RECORD_MAC = 20,\n\tGNUTLS_A_DECRYPTION_FAILED,\n\tGNUTLS_A_RECORD_OVERFLOW,\n\tGNUTLS_A_DECOMPRESSION_FAILURE = 30,\n\tGNUTLS_A_HANDSHAKE_FAILURE = 40,\n\tGNUTLS_A_SSL3_NO_CERTIFICATE = 41,\n\tGNUTLS_A_BAD_CERTIFICATE = 42,\n\tGNUTLS_A_UNSUPPORTED_CERTIFICATE,\n\tGNUTLS_A_CERTIFICATE_REVOKED,\n\tGNUTLS_A_CERTIFICATE_EXPIRED,\n\tGNUTLS_A_CERTIFICATE_UNKNOWN,\n\tGNUTLS_A_ILLEGAL_PARAMETER,\n\tGNUTLS_A_UNKNOWN_CA,\n\tGNUTLS_A_ACCESS_DENIED,\n\tGNUTLS_A_DECODE_ERROR = 50,\n\tGNUTLS_A_DECRYPT_ERROR,\n\tGNUTLS_A_EXPORT_RESTRICTION = 60,\n\tGNUTLS_A_PROTOCOL_VERSION = 70,\n\tGNUTLS_A_INSUFFICIENT_SECURITY,\n\tGNUTLS_A_INTERNAL_ERROR = 80,\n\tGNUTLS_A_USER_CANCELED = 90,\n\tGNUTLS_A_NO_RENEGOTIATION = 100,\n\tGNUTLS_A_UNSUPPORTED_EXTENSION = 110,\n\tGNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,\n\tGNUTLS_A_UNRECOGNIZED_NAME = 112,\n\tGNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,\n\tGNUTLS_A_NO_APPLICATION_PROTOCOL = 120,\n} gnutls_alert_description_t;\n\ntypedef enum\n{\n\tGNUTLS_HANDSHAKE_HELLO_REQUEST = 0,\n\tGNUTLS_HANDSHAKE_CLIENT_HELLO = 1,\n\tGNUTLS_HANDSHAKE_SERVER_HELLO = 2,\n\tGNUTLS_HANDSHAKE_HELLO_VERIFY_REQUEST = 3,\n\tGNUTLS_HANDSHAKE_NEW_SESSION_TICKET = 4,\n\tGNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,\n\tGNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,\n\tGNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,\n\tGNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,\n\tGNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,\n\tGNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,\n\tGNUTLS_HANDSHAKE_FINISHED = 20,\n\tGNUTLS_HANDSHAKE_CERTIFICATE_STATUS = 22,\n\tGNUTLS_HANDSHAKE_SUPPLEMENTAL = 23,\n\tGNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC = 254,\n\tGNUTLS_HANDSHAKE_CLIENT_HELLO_V2 = 1024,\n} gnutls_handshake_description_t;\n\ntypedef enum\n{\n\tGNUTLS_CERT_INVALID = 2,\n\tGNUTLS_CERT_REVOKED = 32,\n\tGNUTLS_CERT_SIGNER_NOT_FOUND = 64,\n\tGNUTLS_CERT_SIGNER_NOT_CA = 128,\n\tGNUTLS_CERT_INSECURE_ALGORITHM = 256,\n\tGNUTLS_CERT_NOT_ACTIVATED = 512,\n\tGNUTLS_CERT_EXPIRED = 1024,\n\tGNUTLS_CERT_SIGNATURE_FAILURE = 2048,\n\tGNUTLS_CERT_REVOCATION_DATA_SUPERSEDED = 4096,\n\tGNUTLS_CERT_UNEXPECTED_OWNER = 16384,\n\tGNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE = 32768,\n\tGNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE = 65536,\n\tGNUTLS_CERT_MISMATCH = 131072,\n} gnutls_certificate_status_t;\n\ntypedef enum\n{\n\tGNUTLS_CERT_IGNORE = 0,\n\tGNUTLS_CERT_REQUEST = 1,\n\tGNUTLS_CERT_REQUIRE = 2\n} gnutls_certificate_request_t;\n\ntypedef enum\n{\n\tGNUTLS_OPENPGP_CERT = 0,\n\tGNUTLS_OPENPGP_CERT_FINGERPRINT = 1\n} gnutls_openpgp_crt_status_t;\n\ntypedef enum\n{\n\tGNUTLS_SHUT_RDWR = 0,\n\tGNUTLS_SHUT_WR = 1\n} gnutls_close_request_t;\n\ntypedef enum\n{\n\tGNUTLS_SSL3 = 1,\n\tGNUTLS_TLS1_0 = 2,\n\tGNUTLS_TLS1 = 2,\n\tGNUTLS_TLS1_1 = 3,\n\tGNUTLS_TLS1_2 = 4,\n\tGNUTLS_DTLS0_9 = 6, /* FIXME: at some point change it to 200 */\n\tGNUTLS_DTLS1_0 = 5, /* 201 */\n\tGNUTLS_DTLS1_2 = 202,\n\tGNUTLS_DTLS_VERSION_MIN = 5,\n\tGNUTLS_DTLS_VERSION_MAX = 202,\n\tGNUTLS_TLS_VERSION_MAX = 4,\n\tGNUTLS_VERSION_UNKNOWN = 0xff /* change it to 0xffff */\n} gnutls_protocol_t;\n\ntypedef enum\n{\n\tGNUTLS_CRT_UNKNOWN = 0,\n\tGNUTLS_CRT_X509 = 1,\n\tGNUTLS_CRT_OPENPGP = 2,\n\tGNUTLS_CRT_RAW = 3\n} gnutls_certificate_type_t;\n\ntypedef enum\n{\n\tGNUTLS_X509_FMT_DER = 0,\n\tGNUTLS_X509_FMT_PEM = 1\n} gnutls_x509_crt_fmt_t;\n\ntypedef enum gnutls_certificate_print_formats\n{\n\tGNUTLS_CRT_PRINT_FULL = 0,\n\tGNUTLS_CRT_PRINT_ONELINE = 1,\n\tGNUTLS_CRT_PRINT_UNSIGNED_FULL = 2,\n\tGNUTLS_CRT_PRINT_COMPACT = 3,\n\tGNUTLS_CRT_PRINT_FULL_NUMBERS = 4,\n} gnutls_certificate_print_formats_t;\n\ntypedef enum\n{\n\tGNUTLS_PK_UNKNOWN = 0,\n\tGNUTLS_PK_RSA = 1,\n\tGNUTLS_PK_DSA = 2,\n\tGNUTLS_PK_DH = 3,\n\tGNUTLS_PK_EC = 4,\n} gnutls_pk_algorithm_t;\n\nconst char *gnutls_pk_algorithm_get_name (gnutls_pk_algorithm_t algorithm);\n\ntypedef enum\n{\n\tGNUTLS_SIGN_UNKNOWN = 0,\n\tGNUTLS_SIGN_RSA_SHA1 = 1,\n\tGNUTLS_SIGN_RSA_SHA = 1,\n\tGNUTLS_SIGN_DSA_SHA1 = 2,\n\tGNUTLS_SIGN_DSA_SHA = 2,\n\tGNUTLS_SIGN_RSA_MD5 = 3,\n\tGNUTLS_SIGN_RSA_MD2 = 4,\n\tGNUTLS_SIGN_RSA_RMD160 = 5,\n\tGNUTLS_SIGN_RSA_SHA256 = 6,\n\tGNUTLS_SIGN_RSA_SHA384 = 7,\n\tGNUTLS_SIGN_RSA_SHA512 = 8,\n\tGNUTLS_SIGN_RSA_SHA224 = 9,\n\tGNUTLS_SIGN_DSA_SHA224 = 10,\n\tGNUTLS_SIGN_DSA_SHA256 = 11,\n\tGNUTLS_SIGN_ECDSA_SHA1 = 12,\n\tGNUTLS_SIGN_ECDSA_SHA224 = 13,\n\tGNUTLS_SIGN_ECDSA_SHA256 = 14,\n\tGNUTLS_SIGN_ECDSA_SHA384 = 15,\n\tGNUTLS_SIGN_ECDSA_SHA512 = 16,\n} gnutls_sign_algorithm_t;\n\ntypedef enum\n{\n\tGNUTLS_ECC_CURVE_INVALID=0,\n\tGNUTLS_ECC_CURVE_SECP224R1,\n\tGNUTLS_ECC_CURVE_SECP256R1,\n\tGNUTLS_ECC_CURVE_SECP384R1,\n\tGNUTLS_ECC_CURVE_SECP521R1,\n\tGNUTLS_ECC_CURVE_SECP192R1,\n} gnutls_ecc_curve_t;\n\ntypedef enum\n{\n\tGNUTLS_SEC_PARAM_INSECURE = -20,\n\tGNUTLS_SEC_PARAM_EXPORT = -15,\n\tGNUTLS_SEC_PARAM_VERY_WEAK = -12,\n\tGNUTLS_SEC_PARAM_WEAK = -10,\n\tGNUTLS_SEC_PARAM_UNKNOWN = 0,\n\tGNUTLS_SEC_PARAM_LOW = 1,\n\tGNUTLS_SEC_PARAM_LEGACY = 2,\n\tGNUTLS_SEC_PARAM_NORMAL = 3,\n\tGNUTLS_SEC_PARAM_HIGH = 4,\n\tGNUTLS_SEC_PARAM_ULTRA = 5,\n} gnutls_sec_param_t;\n\n/**\n * gnutls_channel_binding_t:\n * @GNUTLS_CB_TLS_UNIQUE: "tls-unique" (RFC 5929) channel binding\n *\n * Enumeration of support channel binding types.\n */\n  typedef enum\n  {\n    GNUTLS_CB_TLS_UNIQUE\n  } gnutls_channel_binding_t;\n\ntypedef struct\n{\n\tunsigned char *data;\n\tunsigned int size;\n} gnutls_datum_t;\n\ntypedef void *gnutls_transport_ptr_t;\n\nstruct gnutls_session_int;\ntypedef struct gnutls_session_int *gnutls_session_t;\n\nstruct gnutls_dh_params_int;\ntypedef struct gnutls_dh_params_int *gnutls_dh_params_t;\n\nstruct gnutls_ecdh_params_int;\ntypedef struct gnutls_ecdh_params_int *gnutls_ecdh_params_t;\n\n/* XXX ugly. */\nstruct gnutls_x509_privkey_int;\ntypedef struct gnutls_x509_privkey_int *gnutls_rsa_params_t;\n\nstruct gnutls_priority_st;\ntypedef struct gnutls_priority_st *gnutls_priority_t;\n\ntypedef struct gnutls_params_st\n{\n\tgnutls_params_type_t type;\n\tunion params\n\t{\n\t\tgnutls_dh_params_t dh;\n\t\tgnutls_ecdh_params_t ecdh;\n\t\tgnutls_rsa_params_t rsa_export;\n\t} params;\n\tint deinit;\n} gnutls_params_st;\n\ntypedef int gnutls_params_function (gnutls_session_t, gnutls_params_type_t, gnutls_params_st *);\n\n\n/* internal functions */\nint gnutls_init (gnutls_session_t * session, unsigned int flags);\nvoid gnutls_deinit (gnutls_session_t session);\n\nint gnutls_bye (gnutls_session_t session, gnutls_close_request_t how);\n\nint gnutls_handshake (gnutls_session_t session);\n\nvoid gnutls_handshake_set_timeout (gnutls_session_t session, unsigned int ms);\nint gnutls_rehandshake (gnutls_session_t session);\n\ngnutls_alert_description_t gnutls_alert_get (gnutls_session_t session);\nint gnutls_alert_send (gnutls_session_t session, gnutls_alert_level_t level, gnutls_alert_description_t desc);\nint gnutls_alert_send_appropriate (gnutls_session_t session, int err);\nconst char *gnutls_alert_get_name (gnutls_alert_description_t alert);\nconst char * gnutls_alert_get_strname (gnutls_alert_description_t alert);\n\ngnutls_sec_param_t gnutls_pk_bits_to_sec_param (gnutls_pk_algorithm_t algo, unsigned int bits);\nconst char *gnutls_sec_param_get_name (gnutls_sec_param_t param);\nunsigned int gnutls_sec_param_to_pk_bits (gnutls_pk_algorithm_t algo, gnutls_sec_param_t param);\n\n\n/* Elliptic curves */\nconst char * gnutls_ecc_curve_get_name (gnutls_ecc_curve_t curve);\nint gnutls_ecc_curve_get_size (gnutls_ecc_curve_t curve);\ngnutls_ecc_curve_t gnutls_ecc_curve_get(gnutls_session_t session);\n\n\n/* get information on the current session */\ngnutls_cipher_algorithm_t gnutls_cipher_get (gnutls_session_t session);\ngnutls_kx_algorithm_t gnutls_kx_get (gnutls_session_t session);\ngnutls_mac_algorithm_t gnutls_mac_get (gnutls_session_t session);\ngnutls_compression_method_t gnutls_compression_get (gnutls_session_t session);\ngnutls_certificate_type_t gnutls_certificate_type_get (gnutls_session_t session);\n\nint gnutls_sign_algorithm_get (gnutls_session_t session);\nint gnutls_sign_algorithm_get_client (gnutls_session_t session);\n\nint gnutls_sign_algorithm_get_requested (gnutls_session_t session, size_t indx, gnutls_sign_algorithm_t * algo);\n\n\n/* the name of the specified algorithms */\nconst char *gnutls_cipher_get_name (gnutls_cipher_algorithm_t algorithm);\nconst char *gnutls_mac_get_name (gnutls_mac_algorithm_t algorithm);\nconst char *gnutls_compression_get_name (gnutls_compression_method_t algorithm);\nconst char *gnutls_kx_get_name (gnutls_kx_algorithm_t algorithm);\nconst char *gnutls_certificate_type_get_name (gnutls_certificate_type_t type);\nconst char *gnutls_pk_get_name (gnutls_pk_algorithm_t algorithm);\nconst char *gnutls_sign_get_name (gnutls_sign_algorithm_t algorithm);\n\nsize_t gnutls_cipher_get_key_size (gnutls_cipher_algorithm_t algorithm);\nsize_t gnutls_mac_get_key_size (gnutls_mac_algorithm_t algorithm);\n\nint gnutls_sign_is_secure (gnutls_sign_algorithm_t algorithm);\ngnutls_digest_algorithm_t\ngnutls_sign_get_hash_algorithm (gnutls_sign_algorithm_t sign);\ngnutls_pk_algorithm_t\ngnutls_sign_get_pk_algorithm (gnutls_sign_algorithm_t sign);\ngnutls_sign_algorithm_t\ngnutls_pk_to_sign (gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t hash);\n\ngnutls_mac_algorithm_t gnutls_mac_get_id (const char *name);\ngnutls_compression_method_t gnutls_compression_get_id (const char *name);\ngnutls_cipher_algorithm_t gnutls_cipher_get_id (const char *name);\ngnutls_kx_algorithm_t gnutls_kx_get_id (const char *name);\ngnutls_protocol_t gnutls_protocol_get_id (const char *name);\ngnutls_certificate_type_t gnutls_certificate_type_get_id (const char *name);\ngnutls_pk_algorithm_t gnutls_pk_get_id (const char *name);\ngnutls_sign_algorithm_t gnutls_sign_get_id (const char *name);\n\n/* list supported algorithms */\nconst gnutls_ecc_curve_t * gnutls_ecc_curve_list (void);\nconst gnutls_cipher_algorithm_t *gnutls_cipher_list (void);\nconst gnutls_mac_algorithm_t *gnutls_mac_list (void);\nconst gnutls_compression_method_t *gnutls_compression_list (void);\nconst gnutls_protocol_t *gnutls_protocol_list (void);\nconst gnutls_certificate_type_t *gnutls_certificate_type_list (void);\nconst gnutls_kx_algorithm_t *gnutls_kx_list (void);\nconst gnutls_pk_algorithm_t *gnutls_pk_list (void);\nconst gnutls_sign_algorithm_t *gnutls_sign_list (void);\nconst char *gnutls_cipher_suite_info (size_t idx, unsigned char *cs_id, gnutls_kx_algorithm_t * kx, gnutls_cipher_algorithm_t * cipher, gnutls_mac_algorithm_t * mac, gnutls_protocol_t * min_version);\n\n\n/* error functions */\nint gnutls_error_is_fatal (int error);\nint gnutls_error_to_alert (int err, int *level);\n\nvoid gnutls_perror (int error);\nconst char *gnutls_strerror (int error);\nconst char *gnutls_strerror_name (int error);\n\n\n/* Semi-internal functions.  */\nvoid gnutls_handshake_set_private_extensions (gnutls_session_t session, int allow);\n//int gnutls_handshake_set_random (gnutls_session_t session, const gnutls_datum_t* random);\n\ngnutls_handshake_description_t\ngnutls_handshake_get_last_out (gnutls_session_t session);\ngnutls_handshake_description_t\ngnutls_handshake_get_last_in (gnutls_session_t session);\n\n\n/* Record layer functions.  */\nint gnutls_heartbeat_ping (gnutls_session_t session, size_t data_size, unsigned int max_tries, unsigned int flags);\nint gnutls_heartbeat_pong (gnutls_session_t session, unsigned int flags);\n\n//void gnutls_record_set_timeout (gnutls_session_t session, unsigned int ms);\nvoid gnutls_record_disable_padding (gnutls_session_t session);\n\nvoid gnutls_record_cork (gnutls_session_t session);\nint gnutls_record_uncork (gnutls_session_t session, unsigned int flags);\n \ntypedef struct {\n\tsize_t low;\n\tsize_t high;\n} gnutls_range_st;\n\nint gnutls_range_split (gnutls_session_t session, const gnutls_range_st *orig, gnutls_range_st * small_range, gnutls_range_st * rem_range);\n\nssize_t gnutls_record_send (gnutls_session_t session, const void *data, size_t data_size);\nssize_t gnutls_record_send_range (gnutls_session_t session, const void *data, size_t data_size, const gnutls_range_st *range);\nssize_t gnutls_record_recv (gnutls_session_t session, void *data, size_t data_size);\nssize_t gnutls_record_recv_seq (gnutls_session_t session, void *data, size_t data_size, unsigned char *seq);\n\nvoid gnutls_session_enable_compatibility_mode (gnutls_session_t session);\nvoid gnutls_record_set_max_empty_records (gnutls_session_t session, const unsigned int i);\n\nint gnutls_record_can_use_length_hiding (gnutls_session_t session);\n\nint gnutls_record_get_direction (gnutls_session_t session);\n\nsize_t gnutls_record_get_max_size (gnutls_session_t session);\nssize_t gnutls_record_set_max_size (gnutls_session_t session, size_t size);\n\nsize_t gnutls_record_check_pending (gnutls_session_t session);\n\nvoid gnutls_session_force_valid (gnutls_session_t session);\n\nint gnutls_prf (gnutls_session_t session, size_t label_size, const char *label, int server_random_first, size_t extra_size, const char *extra, size_t outsize, char *out);\n\nint gnutls_prf_raw (gnutls_session_t session, size_t label_size, const char *label, size_t seed_size, const char *seed, size_t outsize, char *out);\n\n\n/**\n * gnutls_server_name_type_t:\n * @GNUTLS_NAME_DNS: Domain Name System name type.\n *\n * Enumeration of different server name types.\n */\ntypedef enum\n{\n\tGNUTLS_NAME_DNS = 1\n} gnutls_server_name_type_t;\n\nint gnutls_server_name_set (gnutls_session_t session, gnutls_server_name_type_t type, const void *name, size_t name_length);\n\nint gnutls_server_name_get (gnutls_session_t session, void *data, size_t * data_length, unsigned int *type, unsigned int indx);\n\nunsigned int gnutls_heartbeat_get_timeout (gnutls_session_t session);\nvoid gnutls_heartbeat_set_timeouts (gnutls_session_t session, unsigned int retrans_timeout, unsigned int total_timeout);\n\n\n/* Heartbeat */\nvoid gnutls_heartbeat_enable (gnutls_session_t session, unsigned int type);\n\nint gnutls_heartbeat_allowed (gnutls_session_t session, unsigned int type);\n\n\n/* Safe renegotiation */\nint gnutls_safe_renegotiation_status (gnutls_session_t session);\n\n\n/**\n * gnutls_supplemental_data_format_type_t:\n * @GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA: Supplemental user mapping data.\n *\n * Enumeration of different supplemental data types (RFC 4680).\n */\ntypedef enum\n{\n\tGNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0\n} gnutls_supplemental_data_format_type_t;\n\nconst char *gnutls_supplemental_get_name (gnutls_supplemental_data_format_type_t type);\n\n\n/* SessionTicket, RFC 5077. */\nint gnutls_session_ticket_key_generate (gnutls_datum_t * key);\nint gnutls_session_ticket_enable_client (gnutls_session_t session);\nint gnutls_session_ticket_enable_server (gnutls_session_t session, const gnutls_datum_t * key);\n\n\n/* SRTP, RFC 5764 */\n\n/**\n * gnutls_srtp_profile_t:\n * @GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80: 128 bit AES with a 80 bit HMAC-SHA1\n * @GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32: 128 bit AES with a 32 bit HMAC-SHA1\n * @GNUTLS_SRTP_NULL_HMAC_SHA1_80: NULL cipher with a 80 bit HMAC-SHA1\n * @GNUTLS_SRTP_NULL_HMAC_SHA1_32: NULL cipher with a 32 bit HMAC-SHA1\n *\n * Enumeration of different SRTP protection profiles.\n */\ntypedef enum\n{\n\tGNUTLS_SRTP_AES128_CM_HMAC_SHA1_80 = 0x0001,\n\tGNUTLS_SRTP_AES128_CM_HMAC_SHA1_32 = 0x0002,\n\tGNUTLS_SRTP_NULL_HMAC_SHA1_80      = 0x0005,\n\tGNUTLS_SRTP_NULL_HMAC_SHA1_32      = 0x0006\n} gnutls_srtp_profile_t;\n\nint gnutls_srtp_set_profile (gnutls_session_t session, gnutls_srtp_profile_t profile);\nint gnutls_srtp_set_profile_direct (gnutls_session_t session, const char *profiles, const char **err_pos);\nint gnutls_srtp_get_selected_profile (gnutls_session_t session, gnutls_srtp_profile_t *profile);\n\nconst char *gnutls_srtp_get_profile_name (gnutls_srtp_profile_t profile);\nint gnutls_srtp_get_profile_id (const char *name, gnutls_srtp_profile_t *profile);\nint gnutls_srtp_get_keys (gnutls_session_t session, void *key_material, unsigned int key_material_size, gnutls_datum_t *client_key, gnutls_datum_t *client_salt, gnutls_datum_t *server_key, gnutls_datum_t *server_salt);\n\nint gnutls_srtp_set_mki (gnutls_session_t session, const gnutls_datum_t *mki);\nint gnutls_srtp_get_mki (gnutls_session_t session, gnutls_datum_t *mki);\n\n/* ALPN TLS extension */\nint gnutls_alpn_get_selected_protocol (gnutls_session_t session, gnutls_datum_t * protocol);\nint gnutls_alpn_set_protocols (gnutls_session_t session, const gnutls_datum_t * protocols, unsigned protocols_size, unsigned flags);\n\nint gnutls_key_generate (gnutls_datum_t * key, unsigned int key_size);\n\n\n/* if you just want some defaults, use the following.  */\nint gnutls_priority_init (gnutls_priority_t * priority_cache, const char *priorities, const char **err_pos);\nvoid gnutls_priority_deinit (gnutls_priority_t priority_cache);\nint gnutls_priority_get_cipher_suite_index (gnutls_priority_t pcache, unsigned int idx, unsigned int *sidx);\n\nint gnutls_priority_set (gnutls_session_t session, gnutls_priority_t priority);\nint gnutls_priority_set_direct (gnutls_session_t session, const char *priorities, const char **err_pos);\n\nint gnutls_priority_certificate_type_list (gnutls_priority_t pcache, const unsigned int** list);\nint gnutls_priority_sign_list (gnutls_priority_t pcache, const unsigned int** list);\nint gnutls_priority_protocol_list (gnutls_priority_t pcache, const unsigned int** list);\nint gnutls_priority_compression_list (gnutls_priority_t pcache, const unsigned int** list);\nint gnutls_priority_ecc_curve_list (gnutls_priority_t pcache, const unsigned int** list);\n\n/* for compatibility */\nint gnutls_set_default_priority (gnutls_session_t session);\n\n/* Returns the name of a cipher suite */\nconst char *gnutls_cipher_suite_get_name (gnutls_kx_algorithm_t kx_algorithm, gnutls_cipher_algorithm_t cipher_algorithm, gnutls_mac_algorithm_t mac_algorithm);\n\n/* get the currently used protocol version */\ngnutls_protocol_t gnutls_protocol_get_version (gnutls_session_t session);\n\nconst char *gnutls_protocol_get_name (gnutls_protocol_t version);\n\n\n/* get/set session */\nint gnutls_session_set_data (gnutls_session_t session, const void *session_data, size_t session_data_size);\nint gnutls_session_get_data (gnutls_session_t session, void *session_data, size_t * session_data_size);\nint gnutls_session_get_data2 (gnutls_session_t session, gnutls_datum_t * data);\nvoid gnutls_session_get_random (gnutls_session_t session, gnutls_datum_t* client, gnutls_datum_t* server);\nchar * gnutls_session_get_desc (gnutls_session_t session);\n\nint gnutls_session_set_premaster (gnutls_session_t session, unsigned int entity, gnutls_protocol_t version, gnutls_kx_algorithm_t kx, gnutls_cipher_algorithm_t cipher, gnutls_mac_algorithm_t mac, gnutls_compression_method_t comp, const gnutls_datum_t* master, const gnutls_datum_t * session_id);\n\n/* returns the session ID */\nint gnutls_session_get_id (gnutls_session_t session, void *session_id, size_t * session_id_size);\nint gnutls_session_get_id2 (gnutls_session_t session, gnutls_datum_t *session_id);\n\nint gnutls_session_set_id (gnutls_session_t session, const gnutls_datum_t * sid);\n\nint gnutls_session_channel_binding (gnutls_session_t session, gnutls_channel_binding_t cbtype, gnutls_datum_t * cb);\n\n/* checks if this session is a resumed one */\nint gnutls_session_is_resumed (gnutls_session_t session);\nint gnutls_session_resumption_requested (gnutls_session_t session);\n\ntypedef int (*gnutls_db_store_func) (void *, gnutls_datum_t key, gnutls_datum_t data);\ntypedef int (*gnutls_db_remove_func) (void *, gnutls_datum_t key);\ntypedef gnutls_datum_t (*gnutls_db_retr_func) (void *, gnutls_datum_t key);\n\nvoid gnutls_db_set_cache_expiration (gnutls_session_t session, int seconds);\n\nvoid gnutls_db_remove_session (gnutls_session_t session);\nvoid gnutls_db_set_retrieve_function (gnutls_session_t session, gnutls_db_retr_func retr_func);\nvoid gnutls_db_set_remove_function (gnutls_session_t session, gnutls_db_remove_func rem_func);\nvoid gnutls_db_set_store_function (gnutls_session_t session, gnutls_db_store_func store_func);\nvoid gnutls_db_set_ptr (gnutls_session_t session, void *ptr);\nvoid *gnutls_db_get_ptr (gnutls_session_t session);\nint gnutls_db_check_entry (gnutls_session_t session, gnutls_datum_t session_entry);\ntime_t gnutls_db_check_entry_time (gnutls_datum_t *entry);\n\ntypedef int (*gnutls_handshake_post_client_hello_func) (gnutls_session_t);\nvoid gnutls_handshake_set_post_client_hello_function (gnutls_session_t session, gnutls_handshake_post_client_hello_func func);\n\nvoid gnutls_handshake_set_max_packet_length (gnutls_session_t session, size_t max);\n\n\n/* returns libgnutls version (call it with a NULL argument) */\nconst char *gnutls_check_version (const char *req_version);\n\n/* Functions for setting/clearing credentials */\nvoid gnutls_credentials_clear (gnutls_session_t session);\n\n/* cred is a structure defined by the kx algorithm */\nint gnutls_credentials_set (gnutls_session_t session, gnutls_credentials_type_t type, void *cred);\n\n\n/* x.509 types */\nstruct gnutls_pubkey_st;\ntypedef struct gnutls_pubkey_st *gnutls_pubkey_t;\n\nstruct gnutls_privkey_st;\ntypedef struct gnutls_privkey_st *gnutls_privkey_t;\n\nstruct gnutls_x509_privkey_int;\ntypedef struct gnutls_x509_privkey_int *gnutls_x509_privkey_t;\n\nstruct gnutls_x509_crl_int;\ntypedef struct gnutls_x509_crl_int *gnutls_x509_crl_t;\n\nstruct gnutls_x509_crt_int;\ntypedef struct gnutls_x509_crt_int *gnutls_x509_crt_t;\n\nstruct gnutls_x509_crq_int;\ntypedef struct gnutls_x509_crq_int *gnutls_x509_crq_t;\n\nstruct gnutls_openpgp_keyring_int;\ntypedef struct gnutls_openpgp_keyring_int *gnutls_openpgp_keyring_t;\n\n\n/* Credential structures - used in gnutls_credentials_set(); */\n\nstruct gnutls_certificate_credentials_st;\ntypedef struct gnutls_certificate_credentials_st *gnutls_certificate_credentials_t;\ntypedef gnutls_certificate_credentials_t gnutls_certificate_server_credentials;\ntypedef gnutls_certificate_credentials_t gnutls_certificate_client_credentials;\n\ntypedef struct gnutls_anon_server_credentials_st *gnutls_anon_server_credentials_t;\ntypedef struct gnutls_anon_client_credentials_st *gnutls_anon_client_credentials_t;\n\nvoid gnutls_anon_free_server_credentials (gnutls_anon_server_credentials_t sc);\nint gnutls_anon_allocate_server_credentials (gnutls_anon_server_credentials_t * sc);\n\nvoid gnutls_anon_set_server_dh_params (gnutls_anon_server_credentials_t res, gnutls_dh_params_t dh_params);\n\nvoid gnutls_anon_set_server_params_function (gnutls_anon_server_credentials_t res, gnutls_params_function * func);\n\nvoid gnutls_anon_free_client_credentials (gnutls_anon_client_credentials_t sc);\nint gnutls_anon_allocate_client_credentials (gnutls_anon_client_credentials_t * sc);\n\n\n/* CERTFILE is an x509 certificate in PEM form. KEYFILE is a pkcs-1 private key in PEM form (for RSA keys).  */\n\nvoid gnutls_certificate_free_credentials (gnutls_certificate_credentials_t sc);\nint gnutls_certificate_allocate_credentials (gnutls_certificate_credentials_t * res);\n\nint gnutls_certificate_get_issuer (gnutls_certificate_credentials_t sc, gnutls_x509_crt_t cert, gnutls_x509_crt_t* issuer, unsigned int flags);\n\nvoid gnutls_certificate_free_keys (gnutls_certificate_credentials_t sc);\nvoid gnutls_certificate_free_cas (gnutls_certificate_credentials_t sc);\nvoid gnutls_certificate_free_ca_names (gnutls_certificate_credentials_t sc);\nvoid gnutls_certificate_free_crls (gnutls_certificate_credentials_t sc);\n\nvoid gnutls_certificate_set_dh_params (gnutls_certificate_credentials_t res, gnutls_dh_params_t dh_params);\nvoid gnutls_certificate_set_verify_flags (gnutls_certificate_credentials_t res, unsigned int flags);\nvoid gnutls_certificate_set_verify_limits (gnutls_certificate_credentials_t res, unsigned int max_bits, unsigned int max_depth);\n\nint gnutls_certificate_set_x509_system_trust (gnutls_certificate_credentials_t cred);\n\nint gnutls_certificate_set_x509_trust_file (gnutls_certificate_credentials_t cred, const char *cafile, gnutls_x509_crt_fmt_t type);\nint gnutls_certificate_set_x509_trust_mem (gnutls_certificate_credentials_t res, const gnutls_datum_t * ca, gnutls_x509_crt_fmt_t type);\n\nint gnutls_certificate_set_x509_crl_file (gnutls_certificate_credentials_t res, const char *crlfile, gnutls_x509_crt_fmt_t type);\nint gnutls_certificate_set_x509_crl_mem (gnutls_certificate_credentials_t res, const gnutls_datum_t * CRL, gnutls_x509_crt_fmt_t type);\n\nint gnutls_certificate_set_x509_key_file (gnutls_certificate_credentials_t res, const char *certfile, const char *keyfile, gnutls_x509_crt_fmt_t type);\n\nint gnutls_certificate_set_x509_key_file2 (gnutls_certificate_credentials_t res, const char *certfile, const char *keyfile, gnutls_x509_crt_fmt_t type, const char* pass, unsigned int flags);\n\nint gnutls_certificate_set_x509_key_mem (gnutls_certificate_credentials_t res, const gnutls_datum_t * cert, const gnutls_datum_t * key, gnutls_x509_crt_fmt_t type);\n\nint gnutls_certificate_set_x509_key_mem2 (gnutls_certificate_credentials_t res, const gnutls_datum_t * cert, const gnutls_datum_t * key, gnutls_x509_crt_fmt_t type, const char* pass, unsigned int flags);\n\nvoid gnutls_certificate_send_x509_rdn_sequence (gnutls_session_t session, int status);\n\nint gnutls_certificate_set_x509_simple_pkcs12_file (gnutls_certificate_credentials_t res, const char *pkcs12file, gnutls_x509_crt_fmt_t type, const char *password);\nint gnutls_certificate_set_x509_simple_pkcs12_mem (gnutls_certificate_credentials_t res, const gnutls_datum_t * p12blob, gnutls_x509_crt_fmt_t type, const char *password);\n\n\n/* New functions to allow setting already parsed X.509 stuff. */\n\nint gnutls_certificate_set_x509_key (gnutls_certificate_credentials_t res, gnutls_x509_crt_t * cert_list, int cert_list_size, gnutls_x509_privkey_t key);\nint gnutls_certificate_set_x509_trust (gnutls_certificate_credentials_t res, gnutls_x509_crt_t * ca_list, int ca_list_size);\nint gnutls_certificate_set_x509_crl (gnutls_certificate_credentials_t res, gnutls_x509_crl_t * crl_list, int crl_list_size);\n\n\n/* OCSP status request extension, RFC 6066 */\ntypedef int (*gnutls_status_request_ocsp_func) (gnutls_session_t session, void *ptr, gnutls_datum_t *ocsp_response);\n\nvoid gnutls_certificate_set_ocsp_status_request_function (gnutls_certificate_credentials_t res, gnutls_status_request_ocsp_func ocsp_func, void *ptr);\n\nint gnutls_certificate_set_ocsp_status_request_file (gnutls_certificate_credentials_t res, const char* response_file, unsigned int flags);\n\nint gnutls_ocsp_status_request_enable_client (gnutls_session_t session, gnutls_datum_t *responder_id, size_t responder_id_size, gnutls_datum_t *request_extensions);\n\nint gnutls_ocsp_status_request_get (gnutls_session_t session, gnutls_datum_t *response);\n\nint gnutls_ocsp_status_request_is_checked (gnutls_session_t session, unsigned int flags);\n\n\n/* global state functions */\nint gnutls_global_init (void);\nvoid gnutls_global_deinit (void);\n\n/**\n * gnutls_time_func:\n * @t: where to store time.\n *\n * Function prototype for time()-like function.  Set with\n * gnutls_global_set_time_function().\n *\n * Returns: Number of seconds since the epoch, or (time_t)-1 on errors.\n */\ntypedef time_t (*gnutls_time_func) (time_t *t);\n\ntypedef int (*mutex_init_func) (void **mutex);\ntypedef int (*mutex_lock_func) (void **mutex);\ntypedef int (*mutex_unlock_func) (void **mutex);\ntypedef int (*mutex_deinit_func) (void **mutex);\n\nvoid gnutls_global_set_mutex (mutex_init_func init, mutex_deinit_func deinit, mutex_lock_func lock, mutex_unlock_func unlock);\n\ntypedef void *(*gnutls_alloc_function) (size_t);\ntypedef void *(*gnutls_calloc_function) (size_t, size_t);\ntypedef int (*gnutls_is_secure_function) (const void *);\ntypedef void (*gnutls_free_function) (void *);\ntypedef void *(*gnutls_realloc_function) (void *, size_t);\n\nvoid gnutls_global_set_mem_functions (gnutls_alloc_function alloc_func, gnutls_alloc_function secure_alloc_func, gnutls_is_secure_function is_secure_func, gnutls_realloc_function realloc_func, gnutls_free_function free_func);\n\nvoid gnutls_global_set_time_function (gnutls_time_func time_func);\n\n/* For use in callbacks */\nextern gnutls_alloc_function gnutls_malloc;\nextern gnutls_alloc_function gnutls_secure_malloc;\nextern gnutls_realloc_function gnutls_realloc;\nextern gnutls_calloc_function gnutls_calloc;\nextern gnutls_free_function gnutls_free;\n\nextern char *(*gnutls_strdup) (const char *);\n\ntypedef void (*gnutls_log_func) (int, const char *);\ntypedef void (*gnutls_audit_log_func) (gnutls_session_t, const char *);\nvoid gnutls_global_set_log_function (gnutls_log_func log_func);\nvoid gnutls_global_set_audit_log_function (gnutls_audit_log_func log_func);\nvoid gnutls_global_set_log_level (int level);\n\n/* Diffie-Hellman parameter handling.  */\nint gnutls_dh_params_init (gnutls_dh_params_t * dh_params);\nvoid gnutls_dh_params_deinit (gnutls_dh_params_t dh_params);\nint gnutls_dh_params_import_raw (gnutls_dh_params_t dh_params, const gnutls_datum_t * prime, const gnutls_datum_t * generator);\nint gnutls_dh_params_import_pkcs3 (gnutls_dh_params_t params, const gnutls_datum_t * pkcs3_params, gnutls_x509_crt_fmt_t format);\nint gnutls_dh_params_generate2 (gnutls_dh_params_t params, unsigned int bits);\nint gnutls_dh_params_export_pkcs3 (gnutls_dh_params_t params, gnutls_x509_crt_fmt_t format, unsigned char *params_data, size_t * params_data_size);\nint gnutls_dh_params_export2_pkcs3 (gnutls_dh_params_t params, gnutls_x509_crt_fmt_t format, gnutls_datum_t *out);\nint gnutls_dh_params_export_raw (gnutls_dh_params_t params, gnutls_datum_t * prime, gnutls_datum_t * generator, unsigned int *bits);\nint gnutls_dh_params_cpy (gnutls_dh_params_t dst, gnutls_dh_params_t src);\n\n\n/* Session stuff */\ntypedef struct\n{\n\tvoid *iov_base;             /* Starting address */\n\tsize_t iov_len;             /* Number of bytes to transfer */\n} giovec_t;\n\ntypedef ssize_t (*gnutls_pull_func) (gnutls_transport_ptr_t, void *, size_t);\ntypedef ssize_t (*gnutls_push_func) (gnutls_transport_ptr_t, const void *, size_t);\n\ntypedef int (*gnutls_pull_timeout_func) (gnutls_transport_ptr_t, unsigned int ms);\n\ntypedef ssize_t (*gnutls_vec_push_func) (gnutls_transport_ptr_t, const giovec_t * iov, int iovcnt);\n\ntypedef int (*gnutls_errno_func) (gnutls_transport_ptr_t);\n\nvoid gnutls_transport_set_int2 (gnutls_session_t session, int r, int s);\n  \nvoid gnutls_transport_get_int2 (gnutls_session_t session, int * r, int *s);\nint gnutls_transport_get_int (gnutls_session_t session);\n\nvoid gnutls_transport_set_ptr (gnutls_session_t session, gnutls_transport_ptr_t ptr);\nvoid gnutls_transport_set_ptr2 (gnutls_session_t session, gnutls_transport_ptr_t recv_ptr, gnutls_transport_ptr_t send_ptr);\n\ngnutls_transport_ptr_t gnutls_transport_get_ptr (gnutls_session_t session);\nvoid gnutls_transport_get_ptr2 (gnutls_session_t session, gnutls_transport_ptr_t * recv_ptr, gnutls_transport_ptr_t * send_ptr);\n\nvoid gnutls_transport_set_vec_push_function (gnutls_session_t session, gnutls_vec_push_func vec_func);\nvoid gnutls_transport_set_push_function (gnutls_session_t session, gnutls_push_func push_func);\nvoid gnutls_transport_set_pull_function (gnutls_session_t session, gnutls_pull_func pull_func);\n\nvoid gnutls_transport_set_pull_timeout_function (gnutls_session_t session, gnutls_pull_timeout_func func);\n\nvoid gnutls_transport_set_errno_function (gnutls_session_t session, gnutls_errno_func errno_func);\n\nvoid gnutls_transport_set_errno (gnutls_session_t session, int err); \n\n\n/* session specific */\nvoid gnutls_session_set_ptr (gnutls_session_t session, void *ptr);\nvoid *gnutls_session_get_ptr (gnutls_session_t session);\n\nvoid gnutls_openpgp_send_cert (gnutls_session_t session, gnutls_openpgp_crt_status_t status);\n\n\n/* This function returns the hash of the given data.  */\nint gnutls_fingerprint (gnutls_digest_algorithm_t algo, const gnutls_datum_t * data, void *result, size_t * result_size);\n\n\n/**\n * gnutls_random_art_t:\n * @GNUTLS_RANDOM_ART_OPENSSH: OpenSSH-style random art.\n *\n * Enumeration of different random art types.\n */\ntypedef enum gnutls_random_art\n{\n\tGNUTLS_RANDOM_ART_OPENSSH=1,\n} gnutls_random_art_t;\n\nint gnutls_random_art (gnutls_random_art_t type, const char* key_type, unsigned int key_size, void * fpr, size_t fpr_size, gnutls_datum_t* art);\n\n\n/* SRP */\ntypedef struct gnutls_srp_server_credentials_st *gnutls_srp_server_credentials_t;\ntypedef struct gnutls_srp_client_credentials_st *gnutls_srp_client_credentials_t; \nvoid gnutls_srp_free_client_credentials (gnutls_srp_client_credentials_t sc);\nint gnutls_srp_allocate_client_credentials (gnutls_srp_client_credentials_t * sc);\nint gnutls_srp_set_client_credentials (gnutls_srp_client_credentials_t res, const char *username, const char *password);\n\nvoid gnutls_srp_free_server_credentials (gnutls_srp_server_credentials_t sc);\nint gnutls_srp_allocate_server_credentials (gnutls_srp_server_credentials_t * sc);\nint gnutls_srp_set_server_credentials_file (gnutls_srp_server_credentials_t res, const char *password_file, const char *password_conf_file);\n\nconst char *gnutls_srp_server_get_username (gnutls_session_t session);\n\nextern void gnutls_srp_set_prime_bits (gnutls_session_t session, unsigned int bits);\n\nint gnutls_srp_verifier (const char *username, const char *password, const gnutls_datum_t * salt, const gnutls_datum_t * generator, const gnutls_datum_t * prime, gnutls_datum_t * res);\n\n/* The static parameters defined in draft-ietf-tls-srp-05\n * Those should be used as input to gnutls_srp_verifier().\n */\nextern const gnutls_datum_t gnutls_srp_4096_group_prime;\nextern const gnutls_datum_t gnutls_srp_4096_group_generator;\n\nextern const gnutls_datum_t gnutls_srp_3072_group_prime;\nextern const gnutls_datum_t gnutls_srp_3072_group_generator;\n\nextern const gnutls_datum_t gnutls_srp_2048_group_prime;\nextern const gnutls_datum_t gnutls_srp_2048_group_generator;\n\nextern const gnutls_datum_t gnutls_srp_1536_group_prime;\nextern const gnutls_datum_t gnutls_srp_1536_group_generator;\n\nextern const gnutls_datum_t gnutls_srp_1024_group_prime;\nextern const gnutls_datum_t gnutls_srp_1024_group_generator;\n\ntypedef int gnutls_srp_server_credentials_function (gnutls_session_t, const char *username, gnutls_datum_t * salt, gnutls_datum_t * verifier, gnutls_datum_t * generator, gnutls_datum_t * prime);\nvoid gnutls_srp_set_server_credentials_function ( gnutls_srp_server_credentials_t cred, gnutls_srp_server_credentials_function * func);\n\ntypedef int gnutls_srp_client_credentials_function (gnutls_session_t, char **, char **);\nvoid gnutls_srp_set_client_credentials_function ( gnutls_srp_client_credentials_t cred, gnutls_srp_client_credentials_function * func);\n\nint gnutls_srp_base64_encode (const gnutls_datum_t * data, char *result, size_t * result_size);\nint gnutls_srp_base64_encode_alloc (const gnutls_datum_t * data, gnutls_datum_t * result);\n\nint gnutls_srp_base64_decode (const gnutls_datum_t * b64_data, char *result, size_t * result_size);\nint gnutls_srp_base64_decode_alloc (const gnutls_datum_t * b64_data, gnutls_datum_t * result);\n\n\n/* PSK stuff */\ntypedef struct gnutls_psk_server_credentials_st *gnutls_psk_server_credentials_t;\ntypedef struct gnutls_psk_client_credentials_st *gnutls_psk_client_credentials_t;\n\n\n/**\n * gnutls_psk_key_flags:\n * @GNUTLS_PSK_KEY_RAW: PSK-key in raw format.\n * @GNUTLS_PSK_KEY_HEX: PSK-key in hex format.\n *\n * Enumeration of different PSK key flags.\n */\ntypedef enum gnutls_psk_key_flags\n{\n\tGNUTLS_PSK_KEY_RAW = 0,\n\tGNUTLS_PSK_KEY_HEX\n} gnutls_psk_key_flags;\n\nvoid gnutls_psk_free_client_credentials (gnutls_psk_client_credentials_t sc);\nint gnutls_psk_allocate_client_credentials (gnutls_psk_client_credentials_t * sc);\nint gnutls_psk_set_client_credentials (gnutls_psk_client_credentials_t res, const char *username, const gnutls_datum_t * key, gnutls_psk_key_flags flags);\n\nvoid gnutls_psk_free_server_credentials (gnutls_psk_server_credentials_t sc);\nint gnutls_psk_allocate_server_credentials (gnutls_psk_server_credentials_t * sc);\nint gnutls_psk_set_server_credentials_file (gnutls_psk_server_credentials_t res, const char *password_file);\n\nint gnutls_psk_set_server_credentials_hint (gnutls_psk_server_credentials_t res, const char *hint);\n\nconst char *gnutls_psk_server_get_username (gnutls_session_t session);\nconst char *gnutls_psk_client_get_hint (gnutls_session_t session);\n\ntypedef int gnutls_psk_server_credentials_function (gnutls_session_t, const char *username, gnutls_datum_t * key);\nvoid gnutls_psk_set_server_credentials_function ( gnutls_psk_server_credentials_t cred, gnutls_psk_server_credentials_function * func);\n\ntypedef int gnutls_psk_client_credentials_function (gnutls_session_t, char **username, gnutls_datum_t * key);\nvoid gnutls_psk_set_client_credentials_function ( gnutls_psk_client_credentials_t cred, gnutls_psk_client_credentials_function * func);\n\nint gnutls_hex_encode (const gnutls_datum_t * data, char *result, size_t * result_size);\nint gnutls_hex_decode (const gnutls_datum_t * hex_data, void *result, size_t * result_size);\n\nvoid gnutls_psk_set_server_dh_params (gnutls_psk_server_credentials_t res, gnutls_dh_params_t dh_params);\n\nvoid gnutls_psk_set_server_params_function (gnutls_psk_server_credentials_t res, gnutls_params_function * func);\n\n/**\n * gnutls_x509_subject_alt_name_t:\n * @GNUTLS_SAN_DNSNAME: DNS-name SAN.\n * @GNUTLS_SAN_RFC822NAME: E-mail address SAN.\n * @GNUTLS_SAN_URI: URI SAN.\n * @GNUTLS_SAN_IPADDRESS: IP address SAN.\n * @GNUTLS_SAN_OTHERNAME: OtherName SAN.\n * @GNUTLS_SAN_DN: DN SAN.\n * @GNUTLS_SAN_OTHERNAME_XMPP: Virtual SAN, used by\n *   gnutls_x509_crt_get_subject_alt_othername_oid.\n *\n * Enumeration of different subject alternative names types.\n */\ntypedef enum gnutls_x509_subject_alt_name_t\n{\n\tGNUTLS_SAN_DNSNAME = 1,\n\tGNUTLS_SAN_RFC822NAME = 2,\n\tGNUTLS_SAN_URI = 3,\n\tGNUTLS_SAN_IPADDRESS = 4,\n\tGNUTLS_SAN_OTHERNAME = 5,\n\tGNUTLS_SAN_DN = 6,\n\t/* The following are "virtual" subject alternative name types, in\n\t   that they are represented by an otherName value and an OID.\n\t   Used by gnutls_x509_crt_get_subject_alt_othername_oid.  */\n\tGNUTLS_SAN_OTHERNAME_XMPP = 1000\n} gnutls_x509_subject_alt_name_t;\n\nstruct gnutls_openpgp_crt_int;\ntypedef struct gnutls_openpgp_crt_int *gnutls_openpgp_crt_t;\n\nstruct gnutls_openpgp_privkey_int;\ntypedef struct gnutls_openpgp_privkey_int *gnutls_openpgp_privkey_t;\n\nstruct gnutls_pkcs11_privkey_st;\ntypedef struct gnutls_pkcs11_privkey_st *gnutls_pkcs11_privkey_t;\n\n/**\n * gnutls_privkey_type_t:\n * @GNUTLS_PRIVKEY_X509: X.509 private key, #gnutls_x509_privkey_t.\n * @GNUTLS_PRIVKEY_OPENPGP: OpenPGP private key, #gnutls_openpgp_privkey_t.\n * @GNUTLS_PRIVKEY_PKCS11: PKCS11 private key, #gnutls_pkcs11_privkey_t.\n * @GNUTLS_PRIVKEY_EXT: External private key, operating using callbacks.\n *\n * Enumeration of different private key types.\n */\ntypedef enum\n{\n\tGNUTLS_PRIVKEY_X509,\n\tGNUTLS_PRIVKEY_OPENPGP,\n\tGNUTLS_PRIVKEY_PKCS11,\n\tGNUTLS_PRIVKEY_EXT\n} gnutls_privkey_type_t;\n\ntypedef struct gnutls_retr2_st\n{\n\tgnutls_certificate_type_t cert_type;\n\tgnutls_privkey_type_t key_type;\n\n\tunion\n\t{\n\t\tgnutls_x509_crt_t *x509;\n\t\tgnutls_openpgp_crt_t pgp;\n\t} cert;\n\tunsigned int ncerts;        /* one for pgp keys */\n\n\tunion\n\t{\n\t\tgnutls_x509_privkey_t x509;\n\t\tgnutls_openpgp_privkey_t pgp;\n\t\tgnutls_pkcs11_privkey_t pkcs11;\n\t} key;\n\n\tunsigned int deinit_all;    /* if non zero all keys will be deinited */\n} gnutls_retr2_st;\n\n\n/* Functions that allow auth_info_t structures handling */\ngnutls_credentials_type_t gnutls_auth_get_type (gnutls_session_t session);\ngnutls_credentials_type_t gnutls_auth_server_get_type (gnutls_session_t session);\ngnutls_credentials_type_t gnutls_auth_client_get_type (gnutls_session_t session);\n\n\n/* DH */\nvoid gnutls_dh_set_prime_bits (gnutls_session_t session, unsigned int bits);\nint gnutls_dh_get_secret_bits (gnutls_session_t session);\nint gnutls_dh_get_peers_public_bits (gnutls_session_t session);\nint gnutls_dh_get_prime_bits (gnutls_session_t session);\n\nint gnutls_dh_get_group (gnutls_session_t session, gnutls_datum_t * raw_gen, gnutls_datum_t * raw_prime);\nint gnutls_dh_get_pubkey (gnutls_session_t session, gnutls_datum_t * raw_key);\n\n\n/* X509PKI */\n\n\n/* These are set on the credentials structure.  */\n\n/* use gnutls_certificate_set_retrieve_function2() in abstract.h\n * instead. It\'s much more efficient.  */\n\ntypedef int gnutls_certificate_retrieve_function (gnutls_session_t, const gnutls_datum_t * req_ca_rdn, int nreqs, const gnutls_pk_algorithm_t * pk_algos, int pk_algos_length, gnutls_retr2_st *);\n\nvoid gnutls_certificate_set_retrieve_function (gnutls_certificate_credentials_t cred, gnutls_certificate_retrieve_function * func);\n\ntypedef int gnutls_certificate_verify_function (gnutls_session_t);\nvoid gnutls_certificate_set_verify_function (gnutls_certificate_credentials_t cred, gnutls_certificate_verify_function * func);\n\nvoid gnutls_certificate_server_set_request (gnutls_session_t session, gnutls_certificate_request_t req);\n\n/* get data from the session */\nconst gnutls_datum_t *gnutls_certificate_get_peers (gnutls_session_t session, unsigned int *list_size);\nconst gnutls_datum_t *gnutls_certificate_get_ours (gnutls_session_t session);\n\nint gnutls_certificate_get_peers_subkey_id(gnutls_session_t session, gnutls_datum_t *id);\n\ntime_t gnutls_certificate_activation_time_peers (gnutls_session_t session);\ntime_t gnutls_certificate_expiration_time_peers (gnutls_session_t session);\n\nint gnutls_certificate_client_get_request_status (gnutls_session_t session);\nint gnutls_certificate_verify_peers2 (gnutls_session_t session, unsigned int *status);\nint gnutls_certificate_verify_peers3 (gnutls_session_t session, const char* hostname, unsigned int *status);\n\nint gnutls_certificate_verification_status_print (unsigned int status, gnutls_certificate_type_t type, gnutls_datum_t * out, unsigned int flags);\n\nint gnutls_pem_base64_encode (const char *msg, const gnutls_datum_t * data, char *result, size_t * result_size);\nint gnutls_pem_base64_decode (const char *header, const gnutls_datum_t * b64_data, unsigned char *result, size_t * result_size);\n\nint gnutls_pem_base64_encode_alloc (const char *msg, const gnutls_datum_t * data, gnutls_datum_t * result);\nint gnutls_pem_base64_decode_alloc (const char *header, const gnutls_datum_t * b64_data, gnutls_datum_t * result);\n\n\nvoid gnutls_certificate_set_params_function (gnutls_certificate_credentials_t res, gnutls_params_function * func);\nvoid gnutls_anon_set_params_function (gnutls_anon_server_credentials_t res, gnutls_params_function * func);\nvoid gnutls_psk_set_params_function (gnutls_psk_server_credentials_t res, gnutls_params_function * func);\n\nint gnutls_hex2bin (const char *hex_data, size_t hex_size, void *bin_data, size_t * bin_size);\n\n/* Trust on first use (or ssh like) functions */\n\n/* stores the provided information to a database\n */\ntypedef int (*gnutls_tdb_store_func) (const char* db_name, const char* host, const char* service, time_t expiration, const gnutls_datum_t* pubkey);\n\ntypedef int (*gnutls_tdb_store_commitment_func) (const char* db_name, const char* host, const char* service, time_t expiration, gnutls_digest_algorithm_t hash_algo, const gnutls_datum_t* hash);\n  \n/* searches for the provided host/service pair that match the\n * provided public key in the database. */\ntypedef int (*gnutls_tdb_verify_func) (const char* db_name, const char* host, const char* service, const gnutls_datum_t *pubkey);\n  \n\nstruct gnutls_tdb_int;\ntypedef struct gnutls_tdb_int *gnutls_tdb_t;\n \nint gnutls_tdb_init (gnutls_tdb_t *tdb);\nvoid gnutls_tdb_set_store_func (gnutls_tdb_t tdb, gnutls_tdb_store_func store);\nvoid gnutls_tdb_set_store_commitment_func (gnutls_tdb_t tdb, gnutls_tdb_store_commitment_func cstore);\nvoid gnutls_tdb_set_verify_func (gnutls_tdb_t tdb, gnutls_tdb_verify_func verify);\nvoid gnutls_tdb_deinit (gnutls_tdb_t tdb);\n\nint gnutls_verify_stored_pubkey (const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_certificate_type_t cert_type, const gnutls_datum_t * cert, unsigned int flags);\n\nint gnutls_store_commitment (const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_digest_algorithm_t hash_algo, const gnutls_datum_t* hash, time_t expiration, unsigned int flags);\n\nint gnutls_store_pubkey (const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_certificate_type_t cert_type, const gnutls_datum_t * cert, time_t expiration, unsigned int flags);\n\n\n/* Other helper functions */\nint gnutls_load_file(const char* filename, gnutls_datum_t * data);\n\nint gnutls_url_is_supported (const char* url);\n\n\n/* PIN callback */\n\n/**\n * gnutls_pin_flag_t:\n * @GNUTLS_PIN_USER: The PIN for the user.\n * @GNUTLS_PIN_SO: The PIN for the security officer (admin).\n * @GNUTLS_PIN_CONTEXT_SPECIFIC: The PIN is for a specific action and key like signing.\n * @GNUTLS_PIN_FINAL_TRY: This is the final try before blocking.\n * @GNUTLS_PIN_COUNT_LOW: Few tries remain before token blocks.\n * @GNUTLS_PIN_WRONG: Last given PIN was not correct.\n *\n * Enumeration of different flags that are input to the PIN function.\n */\ntypedef enum\n{\n\tGNUTLS_PIN_USER = 1,\n\tGNUTLS_PIN_SO = 2,\n\tGNUTLS_PIN_FINAL_TRY = 4,\n\tGNUTLS_PIN_COUNT_LOW = 8,\n\tGNUTLS_PIN_CONTEXT_SPECIFIC = 16,\n\tGNUTLS_PIN_WRONG = 32,\n} gnutls_pin_flag_t;\n\n/**\n * gnutls_pin_callback_t:\n * @userdata: user-controlled data from gnutls_pkcs11_set_pin_function().\n * @attempt: pin-attempt counter, initially 0.\n * @token_url: URL of token.\n * @token_label: label of token.\n * @flags: a #gnutls_pin_flag_t flag.\n * @pin: buffer to hold PIN, of size @pin_max.\n * @pin_max: size of @pin buffer.\n *\n * Callback function type for PKCS#11 or TPM PIN entry.  It is set by\n * functions like gnutls_pkcs11_set_pin_function().\n *\n * The callback should provides the PIN code to unlock the token with\n * label @token_label, specified by the URL @token_url.\n *\n * The PIN code, as a NUL-terminated ASCII string, should be copied\n * into the @pin buffer (of maximum size @pin_max), and return 0 to\n * indicate success.  Alternatively, the callback may return a\n * negative gnutls error code to indicate failure and cancel PIN entry\n * (in which case, the contents of the @pin parameter are ignored).\n *\n * When a PIN is required, the callback will be invoked repeatedly\n * (and indefinitely) until either the returned PIN code is correct,\n * the callback returns failure, or the token refuses login (e.g. when\n * the token is locked due to too many incorrect PINs!).  For the\n * first such invocation, the @attempt counter will have value zero;\n * it will increase by one for each subsequent attempt.\n *\n * Returns: %GNUTLS_E_SUCCESS (0) on success or a negative error code on error.\n *\n * Since: 2.12.0\n **/\ntypedef int (*gnutls_pin_callback_t) (void *userdata, int attempt, const char *token_url, const char *token_label, unsigned int flags, char *pin, size_t pin_max);\n\nvoid gnutls_certificate_set_pin_function (gnutls_certificate_credentials_t, gnutls_pin_callback_t fn, void *userdata);\nvoid gnutls_dtls_set_timeouts (gnutls_session_t session,\n\t\t\t       unsigned int retrans_timeout,\n\t\t\t       unsigned int total_timeout);\n\nunsigned int gnutls_dtls_get_mtu (gnutls_session_t session);\nunsigned int gnutls_dtls_get_data_mtu (gnutls_session_t session);\n\nvoid gnutls_dtls_set_mtu (gnutls_session_t session, unsigned int mtu);\nint gnutls_dtls_set_data_mtu (gnutls_session_t session, unsigned int mtu);\n\nunsigned int gnutls_dtls_get_timeout (gnutls_session_t session);\n\n/**\n * gnutls_dtls_prestate_st:\n * @record_seq: record sequence number\n * @hsk_read_seq: handshake read sequence number\n * @hsk_write_seq: handshake write sequence number\n *\n * DTLS cookie prestate struct.  This is usually never modified by\n * the application, it is used to carry the cookie data between\n * gnutls_dtls_cookie_send(), gnutls_dtls_cookie_verify() and\n * gnutls_dtls_prestate_set().\n */\n  typedef struct\n  {\n    unsigned int record_seq;\n    unsigned int hsk_read_seq;\n    unsigned int hsk_write_seq;\n  } gnutls_dtls_prestate_st;\n\n  int gnutls_dtls_cookie_send (gnutls_datum_t* key,\n\t\t\t       void* client_data, size_t client_data_size,\n\t\t\t       gnutls_dtls_prestate_st* prestate,\n\t\t\t       gnutls_transport_ptr_t ptr,\n\t\t\t       gnutls_push_func push_func);\n\n  int gnutls_dtls_cookie_verify (gnutls_datum_t* key,\n\t\t\t\t void* client_data, size_t client_data_size,\n\t\t\t\t void* _msg, size_t msg_size,\n\t\t\t\t gnutls_dtls_prestate_st* prestate);\n\n  void gnutls_dtls_prestate_set (gnutls_session_t session,\n\t\t\t\t gnutls_dtls_prestate_st* prestate);\n\n  unsigned int gnutls_record_get_discarded (gnutls_session_t session);\n'